stages:
  - build
  - test
  - release

cache:
  paths:
  - apt-cache/

### build & test dependencies
.dep-linux-deps: &dep-linux-deps
  tags:
    - linux
  before_script:
    - apt-get -o dir::cache::archives="apt-cache" update
    - >
      apt-get -o dir::cache::archives="apt-cache" install -y
      ninja-build python3 python3-pip clang gcc gcc-multilib g++-multilib
      gcovr lcov
      git
    - pip3 install meson

.dep-linux: &dep-linux
  <<: *dep-linux-deps
  image: debian

.dep-android: &dep-android
  <<: *dep-linux-deps
  image: jangrewe/gitlab-ci-android

### build

.build-linux: &build-linux
  <<: *dep-linux
  stage: build
  script:
    - mkdir build
    - cd build
    - CXX=${compiler} CXXFLAGS="${ci_cxx_flags}" meson -Db_coverage=${coverage:=false} ..
    - ninja
  artifacts:
    name: build
    expire_in: 1 week
    paths:
      - build/

build:clang:
  <<: *build-linux
  variables:
    compiler: clang++

build:gcc:
  <<: *build-linux
  variables:
    compiler: g++
    coverage: "true"

build:gcc-i386:
  <<: *build-linux
  variables:
    compiler: g++
    ci_cxx_flags: -m32

.build-android: &build-android
  <<: *dep-android
  stage: build
  script:
    # Install ndk-bundle; our android.py supports that.
    - ${ANDROID_HOME}/tools/bin/sdkmanager --install ndk-bundle >/dev/null
    - pip3 install pipenv
    - pipenv install
    - pipenv run ./android.py ${androidabi}
    - mkdir build
    - cd build
    - CXX=${compiler} CXXFLAGS="${ci_cxx_flags}" meson -Db_coverage=${coverage:=false} --cross-file ../android-${androidabi}.txt ..
    - ninja
  artifacts:
    name: build
    expire_in: 1 week
    paths:
      - build/

build:android-arm64-v8a:
  <<: *build-android
  stage: build
  variables:
    androidabi: arm64-v8a

  #	android-arm64-v8a.txt
  #	android-armeabi-v7a.txt
  #	android-x86.txt
  #	android-x86_64.txt

### test

.test-linux: &test-linux
  <<: *dep-linux
  script:
    - cd build
    - ./private_tests --gtest_output=xml:private_tests-log.xml 2>private_tests-debug.log
    - ./public_tests --gtest_output=xml:public_tests-log.xml 2>public_tests-debug.log
    - if test "${coverage:=false}" == true ; then ninja coverage && cat meson-logs/coverage.txt ; fi
  artifacts:
    name: lib_test_and_logs
    expire_in: 1 week
    when: always
    paths:
      - build/libpacketeer.*
      - build/private_tests
      - build/private_tests-debug.log
      - build/private_tests-log.xml
      - build/public_tests
      - build/public_tests-debug.log
      - build/public_tests-log.xml
      - build/meson-logs/coverage*
    reports:
      junit:
        - build/private_tests-log.xml
        - build/public_tests-log.xml

test:clang:
  <<: *test-linux
  image: debian
  stage: test
  needs:
    - build:clang

test:gcc:
  <<: *test-linux
  image: debian
  stage: test
  needs:
    - build:gcc
  variables:
    coverage: "true"
  coverage: /^TOTAL.*\s+(\d+\%)$/

test:gcc-i386:
  <<: *test-linux
  image: debian
  stage: test
  needs:
    - build:gcc-i386


### distribution
release:
  <<: *dep-linux
  image: debian
  stage: release
  script:
    - cd build
    - ninja dist
  needs:
    - build:gcc
  artifacts:
    name: release
    paths:
      - build/meson-dist/packeteer-*.tar.*
  only:
    - tags
