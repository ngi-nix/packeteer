stages:
  - build
  - test

cache:
  paths:
  - apt-cache/

### build

.build-linux: &build-linux
  stage: build
  before_script:
    - apt-get -o dir::cache::archives="apt-cache" update
    - >
      apt-get -o dir::cache::archives="apt-cache" install -y
      ninja-build python3 python3-pip clang gcc gcc-multilib g++-multilib
    - pip3 install meson
  script:
    - mkdir build
    - cd build
    - CXX=$compiler CXXFLAGS="$ci_cxx_flags" meson -Db_coverage=true ..
    - ninja
  artifacts:
    paths:
      - build/

build:clang:
  <<: *build-linux
  image: debian
  tags:
    - linux
  variables:
    compiler: clang++
    os_name: Linux

build:gcc:
  <<: *build-linux
  image: debian
  tags:
    - linux
  variables:
    compiler: g++
    os_name: Linux

build:gcc-i386:
  <<: *build-linux
  image: debian
  tags:
    - linux
  variables:
    compiler: g++
    os_name: i386
    ci_cxx_flags: -m32

### test

.test-linux: &test-linux
  stage: test
  tags:
    - linux
  before_script:
    - apt-get -o dir::cache::archives="apt-cache" update
    - apt-get -o dir::cache::archives="apt-cache" install -y gcc-multilib g++-multilib
  script:
    - cd build
    - ./testsuite --gtest_output=xml:testsuite-log.xml 2>testsuite-debug.log
    - ninja coverage && cat meson-logs/coverage.txt
  artifacts:
    paths:
      - build/libpacketeer.*
      - build/testsuite
      - build/testsuite-debug.log
      - build/testsuite-log.xml
      - build/meson-logs/coveragereport
    reports:
      junit: testsuite-log.xml

test:clang:
  <<: *test-linux
  image: debian
  stage: test
  dependencies:
    - build:clang

test:gcc:
  <<: *test-linux
  image: debian
  stage: test
  dependencies:
    - build:gcc

test:gcc-i386:
  <<: *test-linux
  image: debian
  stage: test
  dependencies:
    - build:gcc-i386
